mainRewriter(license, packageName, name, rootClassFullName, entry, impor) ::= <<
%if(license)%
/*
%license%
*/

%endif%
// @formatter:off
// This file was auto-generated from %rootClassFullName%

%if(packageName)%
package %packageName%

%endif%
import org.sireum.util._

object %name% {
  import org.sireum.util.Rewriter._

  val constructorMap : ConstructorMap = Map(
    %entry; separator=",\n"%
  )%if(impor)%++ %impor; separator=".constructorMap ++ "%.constructorMap%endif%

  def build[T](mode: TraversalMode.Type = TraversalMode.TOP_DOWN)(
    f: RewriteFunction) =
    org.sireum.util.Rewriter.build[T](constructorMap)(mode, f)

  def buildEnd[T](mode: TraversalMode.Type = TraversalMode.TOP_DOWN)(
      f: RewriteFunction, g: RewriteFunction) =
    org.sireum.util.Rewriter.buildEnd[T](constructorMap)(mode, f, g)
}
>>

mainJson(license, packageName, name, rootClassName, rootClassFullName, fromCase, toCase, impor, hasExtern) ::= <<
%if(license)%
/*
%license%
*/

%endif%
// @formatter:off
// This file was auto-generated from %rootClassFullName%

%if(packageName)%
package %packageName%

%endif%
import upickle.Js
import org.sireum.util.Json._
%if(impor)%import %impor; separator="._\nimport "%._%endif%

object %name% {
  %if(hasExtern)%
  type FromExtern = PartialFunction[Any, String]
  type ToExtern = PartialFunction[String, Any]

  final val externMap = scala.collection.mutable.Map[String, (FromExtern, ToExtern)]().withDefaultValue((Map(), Map()))
  %endif%

  import scala.language.implicitConversions

  implicit def from%rootClassName%(o: %rootClassFullName%): Js.Obj =
    o match {
      %fromCase; separator="\n"%
    }

  implicit def to%rootClassName%[T <: %rootClassFullName%](v: Js.Value): T =
    (v: @unchecked) match {
      case o: Js.Obj =>
        (o.value.head._2.asInstanceOf[Js.Str].value match {
           %toCase; separator="\n"%
         }).asInstanceOf[T]
    }
}
>>

constructorEntry(name, fullName, et, ec) ::= <<
("%name%", { es =>
  val Seq(%et; separator=", "%) = es
  %fullName%(%ec; separator=", "%)
})
>>

constructorModuleEntry(name, fullName) ::= <<
("%name%", (_) => %fullName%)
>>

caseFrom(name, fullName, arg) ::= <<
case o: %fullName% =>
  Js.Obj(
    (".class", Js.Str("%name%")),
    %arg; separator=",\n"%
  )
>>

caseModuleFrom(name, fullName) ::= <<
case %fullName% =>
  Js.Obj((".class", Js.Str("%name%")))
>>

caseFromArg(name, type, arg) ::= <<
("%name%", %type%(o.%name%)%if(arg)%(%arg; separator=", "%)%endif%)
>>

caseFromExternArg(name, className) ::= <<
("%name%", fromStr(externMap("%className%")._1(o.%name%)))
>>

caseTo(name, fullName, arg) ::= <<
case "%name%" =>
  %fullName%(%arg; separator=", "%)
>>

caseModuleTo(name, fullName) ::= <<
case "%name%" => %fullName%
>>

caseToArg(type, i, arg) ::= <<
%type%(o.value.toSeq(%i%)._2)%if(arg)%(%arg; separator=", "%)%endif%
>>

caseToExternArg(i, className) ::= <<
externMap("%className%")._2(toStr(o.value.toSeq(%i%)._2))
>>